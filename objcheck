#!/bin/sh
# Author: Michael Chen  License: MIT

program="$0"
version="0.3.2"

version () {
    echo $version
}

help () {
    echo "Usage: ${program} [action] file.m ..."
    echo ""
    echo "Actions:"
    echo "\tversion\t\tShow version info and exit"
    echo "\thelp\t\tShow help info and exit"
    echo "\tapplication\tCompile an application (default)"
    echo "\tstatic\t\tCompile a static library"
    echo "\tdynamic\t\tCompile a dynamic library"
    echo ""
    echo "Options:"
    echo "\t-v\t--version\tPrint version info and exit"
    echo "\t-h\t--help\t\tPrint help info and exit"
    echo ""
    echo "Environment variables:"
    echo "\tGCC\t\t\tSet GCC compiler"
    echo "\tGPP\t\t\tSet G++ compiler"
    echo "\tCLANG\t\t\tSet Clang compiler"
    echo "\tCLANGPP\t\t\tSet Clang++ compiler"
    echo "\tOUT_FILE\t\tThe name of output file"
    echo "\tGNUSTEP_INCLUDE\t\tThe include path of GNUstep"
    echo "\tGNUSTEP_LIB\t\tThe lib path of GNUstep"
    echo "\tCFLAGS\t\t\tCustom include paths and compiler flags for C"
    echo "\tCXXFLAGS\t\tCusteom include paths and compiler flags for C++"
    echo "\tLDFLAGS\t\t\tCustom library paths"
    echo "\tLIBS\t\t\tCustom library linkage"
}

check_ext () {
    case $1 in
    *.mm)
        echo ".mm"
        ;;
    *.m)
        echo ".m"
        ;;
    *.cpp)
        echo ".cpp"
        ;;
    *.cxx)
        echo ".cxx"
        ;;
    *.cc)
        echo ".cc"
        ;;
    *.c)
        echo ".c"
        ;;
    *)
        echo "Unsupported file: $1"
        exit 1
    esac
}

check_file_type () {
    FILE_EXT=$1
    
    if [ "$FILE_EXT" = ".m" ]; then
        echo "objective-c"
    elif [ "$FILE_EXT" = ".mm" ]; then
        echo "objective-c++"
    elif [ "$FILE_EXT" = ".c" ]; then
        echo "c"
    elif [ "$FILE_EXT" = ".cpp" ] || [ "$FILE_EXT" = ".cxx" ] || [ "$FILE_EXT" = ".cc" ]; then
        echo "c++"
    else
        echo "Unknown file extension: $FILE_EXT"
        exit 1
    fi
}

action=$1
if [ "$action" = "version" ]; then
    version;
    exit 0;
fi

if [ "$action" = "help" ]; then
    help;
    exit 0;
fi

if [ "$action" = "application" ] || [ "$action" = "static" ] || [ "$action" = "dynamic" ]; then
    shift;
fi

if [ "$action" != "application" ] && [ "$action" != "static" ] && [ "$action" != "dynamic" ]; then
    action="application";
fi

GCC=$GCC
if [ -z "$GCC" ]; then
    GCC=gcc
fi

GPP=$GPP
if [ -z "$GPP" ]; then
    GPP=g++
fi

CLANG=$CLANG
if [ -z "$CLANG" ]; then
    CLANG=clang
fi

CLANGPP=$CLANGPP
if [ -z "$CLANGPP" ]; then
    CLANGPP=clang++
fi

# Set the include path of GNUstep
GNUSTEP_INCLUDE=$GNUSTEP_INCLUDE
if [ -z "$GNUSTEP_INCLUDE" ]; then
    GNUSTEP_INCLUDE=/usr/include/GNUstep
fi

# Set the lib path of GNUstep
GNUSTEP_LIB=$GNUSTEP_LIB
if [ -z "$GNUSTEP_LIB" ]; then
    GNUSTEP_LIB=/usr/lib/GNUstep
fi

# Set dist file
dest=$OUT_FILE
if [ -z "$dest" ]; then
    dest="out";
fi

if [ -f "$dest" ] || [ -d "$dest" ]; then
    echo "File ${dest} exists in directory"
    exit 1
fi

clean () {
    rm -f $dest "lib${dest}.a" "lib${dest}.so" *.o;
}

# Check whether GCC exists on the host.
$GCC --version > /dev/null
if [ "$?" -ne 0 ]; then
    echo "Please install gcc and gobjc";
    exit 1;
fi

# Check whether `g++` exists on the host.
$GPP --version > /dev/null
if [ "$?" -ne 0 ]; then
    echo "Please install g++";
    exit 1;
fi

# Check whether Clang exists on the host.
$CLANG --version > /dev/null
if [ "$?" -ne 0 ]; then
    echo "Please install clang";
    exit 1;
fi

helloworld=$(cat << EOF
#import <Foundation/Foundation.h>

int main(void)
{
    NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
    if (!pool)
        return 1;

    NSLog(@"Hello World");

    [pool drain];

    return 0;
}
EOF
)

# Check whether GNUstep exists on the host.
temp="$(mktemp --suffix .m)"
echo "$helloworld" > $temp
$GCC -o $dest $temp -lobjc -lgnustep-base -I $GNUSTEP_INCLUDE -L $GNUSTEP_LIB \
    -fconstant-string-class=NSConstantString -fobjc-exceptions
./$dest > /dev/null 2>&1

if [ "$?" -ne 0 ]; then
    echo "Please install GNUstep";
    rm -f $dest
    exit 1;
fi

rm -f $dest

helloworldpp=$(cat << EOFPP
#import <Foundation/Foundation.h>
#include <iostream>

using std::cout;
using std::endl;

int main(void)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    if (!pool)
        return 1;

    cout << "Hello C++" << endl;

    NSLog(@"Hello Objective-C\\\\n");

    [pool drain];

    return 0;
}
EOFPP
)

# Check GNUstep with Objective-C++ on the host.
temp="$(mktemp --suffix .mm)"
echo "$helloworldpp" > $temp
$GPP -o $dest $temp -lobjc -lgnustep-base -I $GNUSTEP_INCLUDE -L $GNUSTEP_LIB \
    -fconstant-string-class=NSConstantString -fobjc-exceptions
./$dest > /dev/null 2>&1

if [ "$?" -ne 0 ]; then
    echo "Please install GNUstep and/or g++";
    rm -f $dest
    exit 1;
fi

rm -f $dest

# Check whether input file paths exist.
src="$@"

if [ -z "$1" ]; then
    echo "No input file";
    exit 1;
fi

# Test the program with GCC.
if [ "$action" = "application" ]; then
    IS_CPP=0
    OBJS=
    for file in "$@"; do
        FILE_EXT=$(check_ext $file | cat)
        filename=$(basename $file)
        objname="${filename%$FILE_EXT}.o"
        OBJS="$objname $OBJS"
        
        FILE_TYPE=$(check_file_type $FILE_EXT | cat)
        
        if [ "$FILE_TYPE" = "objective-c" ]; then
            $GCC -c -o $objname $file -I $GNUSTEP_INCLUDE $CFLAGS \
                -fconstant-string-class=NSConstantString -fobjc-exceptions
        elif [ "$FILE_TYPE" = "objective-c++" ]; then
            IS_CPP=1
            $GPP -c -o $objname $file -I $GNUSTEP_INCLUDE $CXXFLAGS \
                -fconstant-string-class=NSConstantString -fobjc-exceptions
        elif [ "$FILE_TYPE" = "c" ]; then
            $GCC -c -o $objname $file $CFLAGS
        elif [ "$FILE_TYPE" = "c++" ]; then
            IS_CPP=1
            $GPP -c -o $objname $file $CXXFLAGS
        fi
    done
    if [ $IS_CPP -eq 1 ]; then
        LIBS_INTERNAL="-lstdc++"
    fi
    $GCC -o $dest $OBJS $LIBS_INTERNAL -lobjc -lgnustep-base $LIBS \
        -I $GNUSTEP_INCLUDE -L $GNUSTEP_LIB $CFLAGS $LDFLAGS -fconstant-string-class=NSConstantString
    ./$dest
elif [ "$action" = "dynamic" ]; then
    IS_CPP=0
    OBJS=
    for file in "$@"; do
        FILE_EXT=$(check_ext $file | cat)
        filename=$(basename $file)
        objname="${filename%$FILE_EXT}.o"
        OBJS="$objname $OBJS"
        
        FILE_TYPE=$(check_file_type $FILE_EXT | cat)
        
        if [ "$FILE_TYPE" = "objective-c" ]; then
            $GCC -fPIC -c -o $objname $file -I $GNUSTEP_INCLUDE $CFLAGS \
                -fconstant-string-class=NSConstantString -fobjc-exceptions
        elif [ "$FILE_TYPE" = "objective-c++" ]; then
            IS_CPP=1
            $GPP -fPIC -c -o $objname $file -I $GNUSTEP_INCLUDE $CXXFLAGS \
                -fconstant-string-class=NSConstantString -fobjc-exceptions
        elif [ "$FILE_TYPE" = "c" ]; then
            $GCC -fPIC -c -o $objname $file $CFLAGS
        elif [ "$FILE_TYPE" = "c++" ]; then
            IS_CPP=1
            $GPP -fPIC -c -o $objname $file $CXXFLAGS
        fi
    done
    if [ $IS_CPP -eq 1 ]; then
        LIBS_INTERNAL="-lstdc++"
    fi
    $GCC -shared -o "lib${dest}.so" $OBJS $LIBS_INTERNAL -lobjc -lgnustep-base $LIBS \
        -I $GNUSTEP_INCLUDE -L $GNUSTEP_LIB $CFLAGS $LDFLAGS -fconstant-string-class=NSConstantString -fobjc-exceptions
elif [ "$action" = "static" ]; then
    objs=
    for file in "$@"; do
        FILE_EXT=$(check_ext $file | cat)
        filename=$(basename $file)
        objname="${filename%$FILE_EXT}.o"
        OBJS="$objname $OBJS"
        
        FILE_TYPE=$(check_file_type $FILE_EXT | cat)
        
        if [ "$FILE_TYPE" = "objective-c" ]; then
            $GCC -c -o $objname $file -I $GNUSTEP_INCLUDE $CFLAGS -fconstant-string-class=NSConstantString -fobjc-exceptions
        elif [ "$FILE_TYPE" = "objective-c++" ]; then
            IS_CPP=1
            $GPP -c -o $objname $file -I $GNUSTEP_INCLUDE $CXXFLAGS -fconstant-string-class=NSConstantString -fobjc-exceptions
        elif [ "$FILE_TYPE" = "c" ]; then
            $GCC -c -o $objname $file $CFLAGS
        elif [ "$FILE_TYPE" = "c++" ]; then
            IS_CPP=1
            $GPP -c -o $objname $file $CXXFLAGS
        fi
    done
    ar rcs "lib${dest}.a" $OBJS
fi

if [ "$?" -ne 0 ]; then
    echo "Wrong program compiled by GCC";
    clean;
    exit 1;
fi

clean;

# Test the program with Clang.
gccVer=$(gcc --version | head -n1 | awk '{ print $4; }')

if [ "$action" = "application" ]; then
    IS_CPP=0
    OBJS=
    for file in "$@"; do
        FILE_EXT=$(check_ext $file | cat)
        filename=$(basename $file)
        objname="${filename%$FILE_EXT}.o"
        OBJS="$objname $OBJS"
        
        FILE_TYPE=$(check_file_type $FILE_EXT | cat)
        
        if [ "$FILE_TYPE" = "objective-c" ]; then
            $CLANG -c -o $objname $file -I $GNUSTEP_INCLUDE $CFLAGS \
                -I "/usr/lib/gcc/x86_64-linux-gnu/${gccVer}/include" \
                -fconstant-string-class=NSConstantString -fobjc-exceptions
        elif [ "$FILE_TYPE" = "objective-c++" ]; then
            IS_CPP=1
            $CLANGPP -c -o $objname $file -I $GNUSTEP_INCLUDE $CXXFLAGS \
                -I "/usr/lib/gcc/x86_64-linux-gnu/${gccVer}/include" \
                -fconstant-string-class=NSConstantString -fobjc-exceptions
        elif [ "$FILE_TYPE" = "c" ]; then
            $CLANG -c -o $objname $file $CFLAGS
        elif [ "$FILE_TYPE" = "c++" ]; then
            IS_CPP=1
            $CLANGPP -c -o $objname $file $CXXFLAGS
        fi
    done
    if [ $IS_CPP -eq 1 ]; then
        LIBS_INTERNAL="-lstdc++"
    fi
    $CLANG -o $dest $OBJS $LIBS_INTERNAL -lobjc -lgnustep-base $LIBS \
        -I $GNUSTEP_INCLUDE -L $GNUSTEP_LIB -I "/usr/lib/gcc/x86_64-linux-gnu/${gccVer}/include" \
        $CFLAGS $LDFLAGS -fconstant-string-class=NSConstantString
    ./$dest
elif [ "$action" = "dynamic" ]; then
    IS_CPP=0
    OBJS=
    for file in "$@"; do
        FILE_EXT=$(check_ext $file | cat)
        filename=$(basename $file)
        objname="${filename%$FILE_EXT}.o"
        OBJS="$objname $OBJS"
        
        FILE_TYPE=$(check_file_type $FILE_EXT | cat)
        
        if [ "$FILE_TYPE" = "objective-c" ]; then
            $CLANG -fPIC -c -o $objname $file -I $GNUSTEP_INCLUDE $CFLAGS \
                -I $GNUSTEP_INCLUDE -I "/usr/lib/gcc/x86_64-linux-gnu/${gccVer}/include" \
                -fconstant-string-class=NSConstantString -fobjc-exceptions
        elif [ "$FILE_TYPE" = "objective-c++" ]; then
            IS_CPP=1
            $CLANGPP -fPIC -c -o $objname $file -I $GNUSTEP_INCLUDE $CXXFLAGS \
                -I $GNUSTEP_INCLUDE -I "/usr/lib/gcc/x86_64-linux-gnu/${gccVer}/include" \
                -fconstant-string-class=NSConstantString -fobjc-exceptions
        elif [ "$FILE_TYPE" = "c" ]; then
            $CLANG -fPIC -c -o $objname $file $CFLAGS
        elif [ "$FILE_TYPE" = "c++" ]; then
            IS_CPP=1
            $CLANGPP -fPIC -c -o $objname $file $CXXFLAGS
        fi
    done
    if [ $IS_CPP -eq 1 ]; then
        LIBS_INTERNAL="-lstdc++"
    fi
    $CLANG -shared -o "lib${dest}.so" $OBJS $LIBS_INTERNAL -lobjc -lgnustep-base $LIBS \
        -I $GNUSTEP_INCLUDE -L $GNUSTEP_LIB -I "/usr/lib/gcc/x86_64-linux-gnu/${gccVer}/include" \
        $CFLAGS $LDFLAGS -fconstant-string-class=NSConstantString -fobjc-exceptions
elif [ "$action" = "static" ]; then
    IS_CPP=0
    OBJS=
    for file in "$@"; do
        FILE_EXT=$(check_ext $file | cat)
        filename=$(basename $file)
        objname="${filename%$FILE_EXT}.o"
        OBJS="$objname $OBJS"
        
        FILE_TYPE=$(check_file_type $FILE_EXT | cat)
        
        if [ "$FILE_TYPE" = "objective-c" ]; then
            $CLANG -c -o $objname $file -I $GNUSTEP_INCLUDE $CFLAGS \
                -I $GNUSTEP_INCLUDE -I "/usr/lib/gcc/x86_64-linux-gnu/${gccVer}/include" \
                -fconstant-string-class=NSConstantString -fobjc-exceptions
        elif [ "$FILE_TYPE" = "objective-c++" ]; then
            IS_CPP=1
            $CLANGPP -c -o $objname $file -I $GNUSTEP_INCLUDE $CXXFLAGS \
                -I $GNUSTEP_INCLUDE -I "/usr/lib/gcc/x86_64-linux-gnu/${gccVer}/include" \
                -fconstant-string-class=NSConstantString -fobjc-exceptions
        elif [ "$FILE_TYPE" = "c" ]; then
            $CLANG -c -o $objname $file $CFLAGS
        elif [ "$FILE_TYPE" = "c++" ]; then
            IS_CPP=1
            $CLANGPP -c -o $objname $file $CXXFLAGS
        fi
    done
    if [ $IS_CPP -eq 1 ]; then
        LIBS_INTERNAL="-lstdc++"
    fi
    ar rcs "lib${dest}.a" $OBJS
fi

if [ "$?" -ne 0 ]; then
    echo "Wrong program compiled by Clang";
    clean;
    exit 1;
fi

clean;

exit 0;
